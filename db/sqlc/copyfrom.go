// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForAddPlaylistTracks implements pgx.CopyFromSource.
type iteratorForAddPlaylistTracks struct {
	rows                 []AddPlaylistTracksParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddPlaylistTracks) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddPlaylistTracks) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].PlaylistID,
		r.rows[0].SongID,
		r.rows[0].Track,
	}, nil
}

func (r iteratorForAddPlaylistTracks) Err() error {
	return nil
}

func (q *Queries) AddPlaylistTracks(ctx context.Context, arg []AddPlaylistTracksParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"playlist_song"}, []string{"playlist_id", "song_id", "track"}, &iteratorForAddPlaylistTracks{rows: arg})
}

// iteratorForCreateAlbumArtists implements pgx.CopyFromSource.
type iteratorForCreateAlbumArtists struct {
	rows                 []CreateAlbumArtistsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAlbumArtists) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAlbumArtists) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].AlbumID,
		r.rows[0].ArtistID,
	}, nil
}

func (r iteratorForCreateAlbumArtists) Err() error {
	return nil
}

func (q *Queries) CreateAlbumArtists(ctx context.Context, arg []CreateAlbumArtistsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"album_artist"}, []string{"album_id", "artist_id"}, &iteratorForCreateAlbumArtists{rows: arg})
}

// iteratorForCreateAlbumGenres implements pgx.CopyFromSource.
type iteratorForCreateAlbumGenres struct {
	rows                 []CreateAlbumGenresParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateAlbumGenres) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateAlbumGenres) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].AlbumID,
		r.rows[0].GenreName,
	}, nil
}

func (r iteratorForCreateAlbumGenres) Err() error {
	return nil
}

func (q *Queries) CreateAlbumGenres(ctx context.Context, arg []CreateAlbumGenresParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"album_genre"}, []string{"album_id", "genre_name"}, &iteratorForCreateAlbumGenres{rows: arg})
}

// iteratorForCreateScrobbles implements pgx.CopyFromSource.
type iteratorForCreateScrobbles struct {
	rows                 []CreateScrobblesParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateScrobbles) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateScrobbles) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].UserName,
		r.rows[0].SongID,
		r.rows[0].AlbumID,
		r.rows[0].Time,
		r.rows[0].SongDurationMs,
		r.rows[0].DurationMs,
		r.rows[0].SubmittedToListenbrainz,
		r.rows[0].NowPlaying,
	}, nil
}

func (r iteratorForCreateScrobbles) Err() error {
	return nil
}

func (q *Queries) CreateScrobbles(ctx context.Context, arg []CreateScrobblesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"scrobbles"}, []string{"user_name", "song_id", "album_id", "time", "song_duration_ms", "duration_ms", "submitted_to_listenbrainz", "now_playing"}, &iteratorForCreateScrobbles{rows: arg})
}

// iteratorForCreateSongArtists implements pgx.CopyFromSource.
type iteratorForCreateSongArtists struct {
	rows                 []CreateSongArtistsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateSongArtists) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateSongArtists) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SongID,
		r.rows[0].ArtistID,
	}, nil
}

func (r iteratorForCreateSongArtists) Err() error {
	return nil
}

func (q *Queries) CreateSongArtists(ctx context.Context, arg []CreateSongArtistsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"song_artist"}, []string{"song_id", "artist_id"}, &iteratorForCreateSongArtists{rows: arg})
}

// iteratorForCreateSongGenres implements pgx.CopyFromSource.
type iteratorForCreateSongGenres struct {
	rows                 []CreateSongGenresParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateSongGenres) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateSongGenres) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SongID,
		r.rows[0].GenreName,
	}, nil
}

func (r iteratorForCreateSongGenres) Err() error {
	return nil
}

func (q *Queries) CreateSongGenres(ctx context.Context, arg []CreateSongGenresParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"song_genre"}, []string{"song_id", "genre_name"}, &iteratorForCreateSongGenres{rows: arg})
}

// iteratorForSetLBFeedbackUpdated implements pgx.CopyFromSource.
type iteratorForSetLBFeedbackUpdated struct {
	rows                 []SetLBFeedbackUpdatedParams
	skippedFirstNextCall bool
}

func (r *iteratorForSetLBFeedbackUpdated) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForSetLBFeedbackUpdated) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SongID,
		r.rows[0].UserName,
		r.rows[0].Mbid,
	}, nil
}

func (r iteratorForSetLBFeedbackUpdated) Err() error {
	return nil
}

func (q *Queries) SetLBFeedbackUpdated(ctx context.Context, arg []SetLBFeedbackUpdatedParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"lb_feedback_updated"}, []string{"song_id", "user_name", "mbid"}, &iteratorForSetLBFeedbackUpdated{rows: arg})
}

// iteratorForStarSongs implements pgx.CopyFromSource.
type iteratorForStarSongs struct {
	rows                 []StarSongsParams
	skippedFirstNextCall bool
}

func (r *iteratorForStarSongs) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForStarSongs) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].SongID,
		r.rows[0].UserName,
		r.rows[0].Created,
	}, nil
}

func (r iteratorForStarSongs) Err() error {
	return nil
}

func (q *Queries) StarSongs(ctx context.Context, arg []StarSongsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"song_stars"}, []string{"song_id", "user_name", "created"}, &iteratorForStarSongs{rows: arg})
}
