// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: genres.sql

package db

import (
	"context"
)

const createGenre = `-- name: CreateGenre :exec
INSERT INTO genres (name) VALUES ($1) ON CONFLICT DO NOTHING
`

func (q *Queries) CreateGenre(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, createGenre, name)
	return err
}

const deleteAllGenres = `-- name: DeleteAllGenres :exec
DELETE FROM genres
`

func (q *Queries) DeleteAllGenres(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllGenres)
	return err
}

const deleteGenre = `-- name: DeleteGenre :exec
DELETE FROM genres WHERE name = $1
`

func (q *Queries) DeleteGenre(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteGenre, name)
	return err
}

const findAllGenres = `-- name: FindAllGenres :many
SELECT name FROM genres
`

func (q *Queries) FindAllGenres(ctx context.Context) ([]string, error) {
	rows, err := q.db.Query(ctx, findAllGenres)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findGenre = `-- name: FindGenre :one
SELECT name FROM genres WHERE name = $1
`

func (q *Queries) FindGenre(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, findGenre, name)
	err := row.Scan(&name)
	return name, err
}

const findGenresWithCount = `-- name: FindGenresWithCount :many
SELECT genres.name, COALESCE(al.count, 0) AS album_count, COALESCE(so.count, 0) AS song_count FROM genres
LEFT JOIN (
  SELECT genre_name, COUNT(*) AS count FROM album_genre GROUP BY genre_name
) al ON al.genre_name = genres.name
LEFT JOIN (
  SELECT genre_name, COUNT(*) AS count FROM song_genre GROUP BY genre_name
) so ON so.genre_name = genres.name
ORDER BY lower(genres.name)
`

type FindGenresWithCountRow struct {
	Name       string
	AlbumCount int64
	SongCount  int64
}

func (q *Queries) FindGenresWithCount(ctx context.Context) ([]*FindGenresWithCountRow, error) {
	rows, err := q.db.Query(ctx, findGenresWithCount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*FindGenresWithCountRow
	for rows.Next() {
		var i FindGenresWithCountRow
		if err := rows.Scan(&i.Name, &i.AlbumCount, &i.SongCount); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
