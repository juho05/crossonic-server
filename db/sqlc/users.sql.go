// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  name, encrypted_password
) VALUES (
  $1, $2
)
`

type CreateUserParams struct {
	Name              string
	EncryptedPassword []byte
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser, arg.Name, arg.EncryptedPassword)
	return err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE name = $1 RETURNING name
`

func (q *Queries) DeleteUser(ctx context.Context, name string) (string, error) {
	row := q.db.QueryRow(ctx, deleteUser, name)
	err := row.Scan(&name)
	return name, err
}

const findUser = `-- name: FindUser :one
SELECT name, encrypted_password, encrypted_listenbrainz_token, listenbrainz_username FROM users WHERE name = $1
`

func (q *Queries) FindUser(ctx context.Context, name string) (*User, error) {
	row := q.db.QueryRow(ctx, findUser, name)
	var i User
	err := row.Scan(
		&i.Name,
		&i.EncryptedPassword,
		&i.EncryptedListenbrainzToken,
		&i.ListenbrainzUsername,
	)
	return &i, err
}

const findUsers = `-- name: FindUsers :many
SELECT name, encrypted_password, encrypted_listenbrainz_token, listenbrainz_username FROM users
`

func (q *Queries) FindUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, findUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Name,
			&i.EncryptedPassword,
			&i.EncryptedListenbrainzToken,
			&i.ListenbrainzUsername,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserListenBrainzConnection = `-- name: UpdateUserListenBrainzConnection :one
UPDATE users SET encrypted_listenbrainz_token = $2, listenbrainz_username = $3 WHERE name = $1 RETURNING name, encrypted_password, encrypted_listenbrainz_token, listenbrainz_username
`

type UpdateUserListenBrainzConnectionParams struct {
	Name                       string
	EncryptedListenbrainzToken []byte
	ListenbrainzUsername       *string
}

func (q *Queries) UpdateUserListenBrainzConnection(ctx context.Context, arg UpdateUserListenBrainzConnectionParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUserListenBrainzConnection, arg.Name, arg.EncryptedListenbrainzToken, arg.ListenbrainzUsername)
	var i User
	err := row.Scan(
		&i.Name,
		&i.EncryptedPassword,
		&i.EncryptedListenbrainzToken,
		&i.ListenbrainzUsername,
	)
	return &i, err
}
