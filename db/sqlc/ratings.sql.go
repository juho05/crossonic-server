// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ratings.sql

package db

import (
	"context"
)

const removeAlbumRating = `-- name: RemoveAlbumRating :exec
DELETE FROM album_ratings WHERE user_name = $1 AND album_id = $2
`

type RemoveAlbumRatingParams struct {
	UserName string
	AlbumID  string
}

func (q *Queries) RemoveAlbumRating(ctx context.Context, arg RemoveAlbumRatingParams) error {
	_, err := q.db.Exec(ctx, removeAlbumRating, arg.UserName, arg.AlbumID)
	return err
}

const removeArtistRating = `-- name: RemoveArtistRating :exec
DELETE FROM artist_ratings WHERE user_name = $1 AND artist_id = $2
`

type RemoveArtistRatingParams struct {
	UserName string
	ArtistID string
}

func (q *Queries) RemoveArtistRating(ctx context.Context, arg RemoveArtistRatingParams) error {
	_, err := q.db.Exec(ctx, removeArtistRating, arg.UserName, arg.ArtistID)
	return err
}

const removeSongRating = `-- name: RemoveSongRating :exec
DELETE FROM song_ratings WHERE user_name = $1 AND song_id = $2
`

type RemoveSongRatingParams struct {
	UserName string
	SongID   string
}

func (q *Queries) RemoveSongRating(ctx context.Context, arg RemoveSongRatingParams) error {
	_, err := q.db.Exec(ctx, removeSongRating, arg.UserName, arg.SongID)
	return err
}

const setAlbumRating = `-- name: SetAlbumRating :exec
INSERT INTO album_ratings (album_id,user_name,rating) VALUES ($1, $2, $3) ON CONFLICT(album_id,user_name) DO UPDATE SET rating = $3
`

type SetAlbumRatingParams struct {
	AlbumID  string
	UserName string
	Rating   int32
}

func (q *Queries) SetAlbumRating(ctx context.Context, arg SetAlbumRatingParams) error {
	_, err := q.db.Exec(ctx, setAlbumRating, arg.AlbumID, arg.UserName, arg.Rating)
	return err
}

const setArtistRating = `-- name: SetArtistRating :exec
INSERT INTO artist_ratings (artist_id,user_name,rating) VALUES ($1, $2, $3) ON CONFLICT(artist_id,user_name) DO UPDATE SET rating = $3
`

type SetArtistRatingParams struct {
	ArtistID string
	UserName string
	Rating   int32
}

func (q *Queries) SetArtistRating(ctx context.Context, arg SetArtistRatingParams) error {
	_, err := q.db.Exec(ctx, setArtistRating, arg.ArtistID, arg.UserName, arg.Rating)
	return err
}

const setSongRating = `-- name: SetSongRating :exec
INSERT INTO song_ratings (song_id,user_name,rating) VALUES ($1, $2, $3) ON CONFLICT(song_id,user_name) DO UPDATE SET rating = $3
`

type SetSongRatingParams struct {
	SongID   string
	UserName string
	Rating   int32
}

func (q *Queries) SetSongRating(ctx context.Context, arg SetSongRatingParams) error {
	_, err := q.db.Exec(ctx, setSongRating, arg.SongID, arg.UserName, arg.Rating)
	return err
}

const starAlbum = `-- name: StarAlbum :exec
INSERT INTO album_stars (album_id, user_name, created) VALUES ($1, $2, NOW()) ON CONFLICT(album_id,user_name) DO NOTHING
`

type StarAlbumParams struct {
	AlbumID  string
	UserName string
}

func (q *Queries) StarAlbum(ctx context.Context, arg StarAlbumParams) error {
	_, err := q.db.Exec(ctx, starAlbum, arg.AlbumID, arg.UserName)
	return err
}

const starArtist = `-- name: StarArtist :exec
INSERT INTO artist_stars (artist_id, user_name, created) VALUES ($1, $2, NOW()) ON CONFLICT(artist_id,user_name) DO NOTHING
`

type StarArtistParams struct {
	ArtistID string
	UserName string
}

func (q *Queries) StarArtist(ctx context.Context, arg StarArtistParams) error {
	_, err := q.db.Exec(ctx, starArtist, arg.ArtistID, arg.UserName)
	return err
}

const starSong = `-- name: StarSong :exec
INSERT INTO song_stars (song_id, user_name, created) VALUES ($1, $2, NOW()) ON CONFLICT(song_id,user_name) DO NOTHING
`

type StarSongParams struct {
	SongID   string
	UserName string
}

func (q *Queries) StarSong(ctx context.Context, arg StarSongParams) error {
	_, err := q.db.Exec(ctx, starSong, arg.SongID, arg.UserName)
	return err
}

const unstarAlbum = `-- name: UnstarAlbum :exec
DELETE FROM album_stars WHERE user_name = $1 AND album_id = $2
`

type UnstarAlbumParams struct {
	UserName string
	AlbumID  string
}

func (q *Queries) UnstarAlbum(ctx context.Context, arg UnstarAlbumParams) error {
	_, err := q.db.Exec(ctx, unstarAlbum, arg.UserName, arg.AlbumID)
	return err
}

const unstarArtist = `-- name: UnstarArtist :exec
DELETE FROM artist_stars WHERE user_name = $1 AND artist_id = $2
`

type UnstarArtistParams struct {
	UserName string
	ArtistID string
}

func (q *Queries) UnstarArtist(ctx context.Context, arg UnstarArtistParams) error {
	_, err := q.db.Exec(ctx, unstarArtist, arg.UserName, arg.ArtistID)
	return err
}

const unstarSong = `-- name: UnstarSong :exec
DELETE FROM song_stars WHERE user_name = $1 AND song_id = $2
`

type UnstarSongParams struct {
	UserName string
	SongID   string
}

func (q *Queries) UnstarSong(ctx context.Context, arg UnstarSongParams) error {
	_, err := q.db.Exec(ctx, unstarSong, arg.UserName, arg.SongID)
	return err
}
