// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: artists.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArtist = `-- name: CreateArtist :one
INSERT INTO artists
(id, name, created, updated, music_brainz_id)
VALUES ($1, $2, NOW(), NOW(), $3)
RETURNING id, name, created, updated, music_brainz_id
`

type CreateArtistParams struct {
	ID            string
	Name          string
	MusicBrainzID *string
}

func (q *Queries) CreateArtist(ctx context.Context, arg CreateArtistParams) (*Artist, error) {
	row := q.db.QueryRow(ctx, createArtist, arg.ID, arg.Name, arg.MusicBrainzID)
	var i Artist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Created,
		&i.Updated,
		&i.MusicBrainzID,
	)
	return &i, err
}

const deleteArtistsLastUpdatedBefore = `-- name: DeleteArtistsLastUpdatedBefore :exec
DELETE FROM artists WHERE updated < $1
`

func (q *Queries) DeleteArtistsLastUpdatedBefore(ctx context.Context, updated pgtype.Timestamptz) error {
	_, err := q.db.Exec(ctx, deleteArtistsLastUpdatedBefore, updated)
	return err
}

const findArtistsByName = `-- name: FindArtistsByName :many
SELECT id, name, created, updated, music_brainz_id FROM artists WHERE name = any($1::text[])
`

func (q *Queries) FindArtistsByName(ctx context.Context, artistNames []string) ([]*Artist, error) {
	rows, err := q.db.Query(ctx, findArtistsByName, artistNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Artist
	for rows.Next() {
		var i Artist
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Created,
			&i.Updated,
			&i.MusicBrainzID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArtist = `-- name: UpdateArtist :exec
UPDATE artists SET name = $2, music_brainz_id = $3, updated = NOW() WHERE id = $1
`

type UpdateArtistParams struct {
	ID            string
	Name          string
	MusicBrainzID *string
}

func (q *Queries) UpdateArtist(ctx context.Context, arg UpdateArtistParams) error {
	_, err := q.db.Exec(ctx, updateArtist, arg.ID, arg.Name, arg.MusicBrainzID)
	return err
}
