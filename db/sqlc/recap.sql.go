// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: recap.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getScrobbleDistinctAlbumCount = `-- name: GetScrobbleDistinctAlbumCount :one
SELECT COALESCE(COUNT(DISTINCT album_id), 0) FROM scrobbles WHERE user_name = $1 AND now_playing = false AND time >= $2 AND time < $3
`

type GetScrobbleDistinctAlbumCountParams struct {
	UserName string
	Start    pgtype.Timestamptz
	End      pgtype.Timestamptz
}

func (q *Queries) GetScrobbleDistinctAlbumCount(ctx context.Context, arg GetScrobbleDistinctAlbumCountParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, getScrobbleDistinctAlbumCount, arg.UserName, arg.Start, arg.End)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const getScrobbleDistinctArtistCount = `-- name: GetScrobbleDistinctArtistCount :one
SELECT COALESCE(COUNT(DISTINCT song_artist.artist_id), 0) FROM scrobbles
INNER JOIN song_artist ON scrobbles.song_id = song_artist.song_id
WHERE scrobbles.user_name = $1 AND scrobbles.now_playing = false AND scrobbles.time >= $2 AND scrobbles.time < $3
`

type GetScrobbleDistinctArtistCountParams struct {
	UserName string
	Start    pgtype.Timestamptz
	End      pgtype.Timestamptz
}

func (q *Queries) GetScrobbleDistinctArtistCount(ctx context.Context, arg GetScrobbleDistinctArtistCountParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, getScrobbleDistinctArtistCount, arg.UserName, arg.Start, arg.End)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const getScrobbleDistinctSongCount = `-- name: GetScrobbleDistinctSongCount :one
SELECT COALESCE(COUNT(DISTINCT song_id), 0) FROM scrobbles WHERE user_name = $1 AND now_playing = false AND time >= $2 AND time < $3
`

type GetScrobbleDistinctSongCountParams struct {
	UserName string
	Start    pgtype.Timestamptz
	End      pgtype.Timestamptz
}

func (q *Queries) GetScrobbleDistinctSongCount(ctx context.Context, arg GetScrobbleDistinctSongCountParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, getScrobbleDistinctSongCount, arg.UserName, arg.Start, arg.End)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}

const getScrobbleDurationSumMS = `-- name: GetScrobbleDurationSumMS :one
SELECT COALESCE(SUM(duration_ms), 0) FROM scrobbles WHERE user_name = $1 AND duration_ms IS NOT NULL AND now_playing = false AND time >= $2 AND time < $3
`

type GetScrobbleDurationSumMSParams struct {
	UserName string
	Start    pgtype.Timestamptz
	End      pgtype.Timestamptz
}

func (q *Queries) GetScrobbleDurationSumMS(ctx context.Context, arg GetScrobbleDurationSumMSParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, getScrobbleDurationSumMS, arg.UserName, arg.Start, arg.End)
	var coalesce interface{}
	err := row.Scan(&coalesce)
	return coalesce, err
}
